// üìÑ tests/largeLoad.test.js
import request from "supertest";
import app from "../app.js"; // –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
import { sequelize } from "../db/postgres.js"; // –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å
import { User } from "../models/index.js";

beforeAll(async () => {
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
  await sequelize.sync({ force: true });
  await User.create({ balance: 10000 }); // —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º 10000
});

afterAll(async () => {
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  await sequelize.close();
});

const n = 5000;
describe(`Load Test - ${n} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–Ω—è—Ç–∏–µ –ø–æ 2 –µ–¥–∏–Ω–∏—Ü—ã —Å –±–∞–ª–∞–Ω—Å–∞`, () => {
  it("—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 10000 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ", async () => {
    const user = await User.findOne();

    // –ú–∞—Å—Å–∏–≤ —Å 10000 –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    // const n = 10000;
    const requests = Array.from({ length: n }, async (_, index) => {
      return request(app)
        .post("/update-balance")
        .send({ userId: user.id, amount: -2 }); // —Å–Ω–∏–º–∞–µ–º 2 —Å –±–∞–ª–∞–Ω—Å–∞
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = await Promise.all(requests);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–º–∏, –∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 5000 ‚Äî —Å –æ—à–∏–±–∫–∞–º–∏
    let successCount = 0;
    let failureCount = 0;

    results.forEach((res) => {
      if (res.status === 200) {
        successCount++;
      } else {
        failureCount++;
      }
    });

    console.log("successes and fails:", successCount, failureCount);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 5000 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∞ 5000 –Ω–µ –ø—Ä–æ—à–ª–∏ (–∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤)
    // expect(successCount).toBeGreaterThanOrEqual(5000);
    // expect(failureCount).toBeGreaterThanOrEqual(5000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –º–µ–Ω—å—à–µ 0
    const updatedUser = await User.findOne();
    expect(updatedUser.balance).toBeGreaterThanOrEqual(0);
  });
});
